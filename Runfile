require_relative 'app/boot'
include Bobkit::Tasks
include Bobkit::Watcher

title   "Sector Seven"
summary "Generate sector-seven.net"
version "0.1.0"

output_folder 'site'
root_folder 'src'
markdown_folder 'src/data'
scss_options cache: true, syntax: :scss, style: :compressed

usage  "(b|build) [-HCJA]"
help   "Generate the site or parts of it"
option "-H, --html", "Build HTML only"
option "-C, --css", "Build CSS only"
option "-A, --assets", "Build assets only"
option "-J, --js", "Build javascripts only"
action :b, :build do |args|
  all = !(args['--html'] or args['--css'] or args['--assets'] or args['--js'])
  build_html if all or args['--html']
  build_css if all or args['--css']
  build_assets if all or args['--assets']
  build_js if all or args['--js']
rescue => e
  say "!txtred!ERROR\n#{e.class} !txtpur!#{e.message}"
  say "in #{e.backtrace[0]}"
end

help   "Watch and build"
action :w, :watch do
  say "watching"
  watch 'src' do |filename, event|
    say "#{event} !txtgrn!#{File.basename filename}"
    ext = File.extname(filename)[1..-1]
    
    case ext
    when 'slim', 'md', 'yml'
      execute 'build --html'
    when 'scss'
      execute 'build --css'
    when 'coffee'
      execute 'build --js'
    else
      execute 'build --assets'
    end
  end
end

help   "Start development server"
action :s, :server do
  run! "rackup -p 3000 -o 0.0.0.0"
end

def build_html
  say "rendering html ... "

  softwares = Software.all

  render 'index', layout: 'default', output: 'index', softwares: softwares
  
  softwares.each do |software|
    render 'software/show', layout: 'default', 
      output: "software/#{software.id}", software: software
  end

  render 'software/fileblender/info', layout: 'default', 
    output: 'software/fileblender/info', software: Software.new(:fileblender)

  render 'software/rpg/samples', layout: 'default', 
    output: 'software/rpg/samples', software: Software.new(:rpg)

  rpg = Software.new(:rpg)
  render 'software/rpg/tutorials', layout: 'default', 
    output: 'software/rpg/tutorials', software: rpg, selected: nil

  rpg.videos.each do |key, data|
    render 'software/rpg/tutorials', layout: 'default', 
      output: "software/rpg/tutorials/#{key}", software: rpg, selected: data
  end
  
  say "!txtgrn!done"
end

def build_css
  say "compiling css ... "
  compile_css 'site', output: 'style'
  say "!txtgrn!done"
end

def build_assets
  say "copying assets ... "
  copy_asset "images"
  copy_asset "downloads"
  copy_asset "rpg-samples"
  say "!txtgrn!done"
end

def build_js
  say "compiling javascripts ... "
  compile_js 'site', output: 'site'
  say "!txtgrn!done"
end


action :debug do
  byebug
end
